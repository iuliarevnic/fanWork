N = S DECLA DECLB DECLLIST IFSTMT WHILESTMT CMPDSTMT STRUCTSTMT ARRAYADD ARRAYDEL STMTLIST STMT SIMPLSTMT ASSIGNSTMT IDENTIFIER RELATION CONDITION EXPRESSION TYPE ARRAYDECL ASSIGNLIST IDCONST CONST ARRAYSTRING DECLARATION READA READB WHILE CONDDIF IF CONDGREAT ASSIGN ELSE IOSTMT TERM FACTOR PRINT IDA IDB
E = { } ( ) begin end ; . @ type int if while main is return while <- - read print else > != 0 boolean string List new toString add del + * < <= == > >=
S = S
P =
S->begin int main ( ) { DECLLIST ; CMPDSTMT return 0 ; } end
DECLLIST->DECLARATION
DECLLIST->DECLARATION ; DECLLIST
DECLARATION->@ IDENTIFIER type TYPE
TYPE->boolean
TYPE->string
TYPE->int
TYPE->List
ARRAYDECL->IDENTIFIER ASSIGNLIST ;
ASSIGNLIST->IDENTIFIER <- new TYPE List ( ) ;
ARRAYSTRING->IDENTIFIER . toString ( ) ;
ARRAYADD->IDENTIFIER . add ( IDCONST ) ;
ARRAYDEL->IDENTIFIER . del ( IDCONST ) ;
IDCONST->IDENTIFIER
IDCONST->CONST
CMPDSTMT->STMTLIST
STMTLIST->STMT
STMTLIST->STMT STMTLIST
STMT->SIMPLSTMT
STMT->STRUCTSTMT
SIMPLSTMT->ASSIGNSTMT
SIMPLSTMT->IOSTMT
ASSIGN->IDENTIFIER <- EXPRESSION
EXPRESSION->EXPRESSION + TERM
EXPRESSION->TERM
TERM->TERM * FACTOR
TERM->FACTOR
FACTOR->( EXPRESSION )
FACTOR->IDENTIFIER
IOSTMT->read IDENTIFIER ;
IOSTMT->print IDENTIFIER ;
STRUCTSTMT->CMPDSTMT
STRUCTSTMT->IFSTMT
STRUCTSTMT->WHILESTMT
IFSTMT->if CONDITION { STMT }
IFSTMT->if CONDITION { STMT else { STMT } }
WHILESTMT->while CONDITION { STMT }
CONDITION->( EXPRESSION RELATION EXPRESSION )
RELATION-><
RELATION-><=
RELATION->==
RELATION->>=
RELATION->>
RELATION->!=
