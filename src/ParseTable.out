is is : pop 0
* * : pop 0
A read : E 3
List List : pop 0
return return : pop 0
CMPDSTMT { : {STMTLIST} 17
end end : pop 0
else else : pop 0
del del : pop 0
DECLARATION @ : @identifiertypeTYPE 5
A print : E 3
A { : E 3
RELATION > : > 49
CONDITION ( : (EXPRESSIONRELATIONEXPRESSION) 44
{ { : pop 0
STRUCTSTMT if : IFSTMT 40
; ; : pop 0
+ + : pop 0
RELATION < : < 45
RELATION != : != 50
D ) : E 26
read read : pop 0
D ; : E 26
D < : E 26
D != : E 26
D > : E 26
WHILESTMT while : whileCONDITIONSTMT 43
C return : E 19
$ $ : acc 0
!= != : pop 0
C read : STMTLIST 20
< < : pop 0
RELATION == : == 47
TYPE string : string 7
TYPE boolean : boolean 6
string string : pop 0
IOSTMT read : readidentifier; 37
while while : pop 0
C { : STMTLIST 20
SIMPLSTMT print : IOSTMT 24
C } : E 19
STMT while : STRUCTSTMT 22
if if : pop 0
} } : pop 0
- - : pop 0
STMT read : SIMPLSTMT 21
F ( : (D) 35
F * : E 34
RELATION <= : <= 46
F + : E 34
F - : E 34
TYPE List : List 9
F / : E 34
A while : E 3
STMTLIST { : STMTC 18
begin begin : pop 0
TYPE int : int 8
D <= : E 26
. . : pop 0
main main : pop 0
> > : pop 0
STMTLIST read : STMTC 18
STRUCTSTMT while : WHILESTMT 41
toString toString : pop 0
int int : pop 0
STMTLIST print : STMTC 18
print print : pop 0
DECLLIST @ : DECLARATIONA 2
D == : E 26
/ / : pop 0
>= >= : pop 0
RELATION >= : >= 48
boolean boolean : pop 0
STMT if : STRUCTSTMT 22
C while : STMTLIST 20
D >= : E 26
A if : E 3
STMT print : SIMPLSTMT 21
( ( : pop 0
@ @ : pop 0
== == : pop 0
0 0 : pop 0
STMTLIST if : STMTC 18
IFSTMT if : ifCONDITIONSTMTelseSTMT 42
STMT { : STRUCTSTMT 22
add add : pop 0
IOSTMT print : printidentifier; 38
type type : pop 0
C print : STMTLIST 20
A ; : ;DECLLIST 4
) ) : pop 0
<- <- : pop 0
<= <= : pop 0
SIMPLSTMT read : IOSTMT 24
S begin : beginintmain(){DECLLISTSTMTLISTreturn0;}end 1
new new : pop 0
STMTLIST while : STMTC 18
C if : STMTLIST 20
STRUCTSTMT { : CMPDSTMT 39
