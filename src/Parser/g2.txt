N = S DECLA DECLB DECLLIST IFSTMT WHILESTMT CMPDSTMT STRUCTSTMT ARRAYADD ARRAYDEL A B C D F STMTLIST STMT SIMPLSTMT ASSIGNSTMT RELATION CONDITION EXPRESSION TYPE ARRAYDECL ASSIGNLIST IDCONST ARRAYSTRING DECLARATION READA READB WHILE CONDDIF IF CONDGREAT ASSIGN ELSE IOSTMT TERM FACTOR PRINT IDA IDB identifier constant
E = { } ( ) begin end ; . @ type int if while main is return while <- - read print else > != 0 boolean string List new toString add del + * / < <= == > >=
S = S
P =
S->begin int main ( ) { DECLLIST STMTLIST return 0 ; } end
DECLLIST->DECLARATION A
A->E
A->; DECLLIST
DECLARATION->@ identifier type TYPE
TYPE->boolean
TYPE->string
TYPE->int
TYPE->List
ARRAYDECL->identifier ASSIGNLIST ;
ASSIGNLIST->identifier <- new TYPE List ( ) ;
ARRAYSTRING->identifier . toString ( ) ;
ARRAYADD->identifier . add ( IDCONST ) ;
ARRAYDEL->identifier . del ( IDCONST ) ;
IDCONST->identifier
IDCONST->constant
CMPDSTMT->{ STMTLIST }
STMTLIST->STMT C
C->E
C->STMTLIST
STMT->SIMPLSTMT
STMT->STRUCTSTMT
SIMPLSTMT->ASSIGNSTMT
SIMPLSTMT->IOSTMT
ASSIGN->identifier <- D ;
D->E
D->EXPRESSION
EXPRESSION->TERM + D
EXPRESSION->TERM - D
TERM->TERM * F
TERM->TERM / F
TERM->FACTOR
F->FACTOR
F->E
F->( D )
FACTOR->IDCONST
IOSTMT->read identifier ;
IOSTMT->print identifier ;
STRUCTSTMT->CMPDSTMT
STRUCTSTMT->IFSTMT
STRUCTSTMT->WHILESTMT
IFSTMT->if CONDITION STMT else STMT
WHILESTMT->while CONDITION STMT
CONDITION->( EXPRESSION RELATION EXPRESSION )
RELATION-><
RELATION-><=
RELATION->==
RELATION->>=
RELATION->>
RELATION->!=
